# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_system_pb2 as file__system__pb2


class FSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
                '/FS/ListFiles',
                request_serializer=file__system__pb2.Path.SerializeToString,
                response_deserializer=file__system__pb2.PathFiles.FromString,
                )


class FSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=file__system__pb2.Path.FromString,
                    response_serializer=file__system__pb2.PathFiles.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FS/ListFiles',
            file__system__pb2.Path.SerializeToString,
            file__system__pb2.PathFiles.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OpenFileStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.open = channel.unary_unary(
                '/OpenFile/open',
                request_serializer=file__system__pb2.Path.SerializeToString,
                response_deserializer=file__system__pb2.PathFiles.FromString,
                )


class OpenFileServicer(object):
    """Missing associated documentation comment in .proto file."""

    def open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpenFileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'open': grpc.unary_unary_rpc_method_handler(
                    servicer.open,
                    request_deserializer=file__system__pb2.Path.FromString,
                    response_serializer=file__system__pb2.PathFiles.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OpenFile', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OpenFile(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OpenFile/open',
            file__system__pb2.Path.SerializeToString,
            file__system__pb2.PathFiles.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReadFileStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.read = channel.unary_unary(
                '/ReadFile/read',
                request_serializer=file__system__pb2.Path.SerializeToString,
                response_deserializer=file__system__pb2.PathFiles.FromString,
                )


class ReadFileServicer(object):
    """Missing associated documentation comment in .proto file."""

    def read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReadFileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'read': grpc.unary_unary_rpc_method_handler(
                    servicer.read,
                    request_deserializer=file__system__pb2.Path.FromString,
                    response_serializer=file__system__pb2.PathFiles.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReadFile', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReadFile(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReadFile/read',
            file__system__pb2.Path.SerializeToString,
            file__system__pb2.PathFiles.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CloseFileStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.close = channel.unary_unary(
                '/CloseFile/close',
                request_serializer=file__system__pb2.Path.SerializeToString,
                response_deserializer=file__system__pb2.PathFiles.FromString,
                )


class CloseFileServicer(object):
    """Missing associated documentation comment in .proto file."""

    def close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloseFileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'close': grpc.unary_unary_rpc_method_handler(
                    servicer.close,
                    request_deserializer=file__system__pb2.Path.FromString,
                    response_serializer=file__system__pb2.PathFiles.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CloseFile', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CloseFile(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CloseFile/close',
            file__system__pb2.Path.SerializeToString,
            file__system__pb2.PathFiles.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
